{"version":3,"sources":["components/header.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Header","Main","props","className","style","height","keystrokes","map","val","index","id","sounds","onClick","sound","key","src","name","App","handleClick","event","newSound","Audio","target","console","log","play","setState","state","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4OAQeA,G,MANA,WACX,OACI,8CC4BOC,EA9BF,SAACC,GAEV,OACI,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YAAYC,MAJ1B,CAACC,OAAQ,MAKLH,EAAMI,WAAWC,KAAI,SAACC,EAAKC,GAAN,OACtB,4BACAN,UAAU,iBACVO,GAAIR,EAAMS,OAAOF,GACjBG,QAASV,EAAMW,MACfC,IAAKN,GACHA,EACF,2BACAO,IAAG,mBAAcb,EAAMS,OAAOF,GAA3B,QACHN,UAAWD,EAAMS,OAAOF,GACxBC,GAAIF,SAKR,yBAAKL,UAAU,SACX,4CACA,wBAAIO,GAAG,WAAWR,EAAMc,UCgC7BC,E,kDAnDb,aAAe,IAAD,8BACZ,gBA2BFC,YAAc,SAACC,GACb,IAAIC,EAAW,IAAIC,MAAJ,mBAAsBF,EAAMG,OAAOZ,GAAnC,SACfa,QAAQC,IAAIJ,EAASL,KACrBK,EAASK,OACT,EAAKC,SAAS,CACZV,KAAMG,EAAMG,OAAOZ,MA/BrB,EAAKiB,MAAQ,CACXhB,OAAQ,CACN,QACA,WACA,QACA,OACA,MACA,cACA,QACA,cACA,OAEFL,WAAY,CACV,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFU,KAAM,IAzBI,E,qDAsCZ,OACE,yBAAKb,UAAU,MAAMO,GAAG,gBACtB,kBAAC,EAAD,MACA,kBAAC,EAAD,CACAG,MAAOe,KAAKV,YACZP,OAAQiB,KAAKD,MAAMhB,OACnBK,KAAMY,KAAKD,MAAMX,KACjBV,WAAYsB,KAAKD,MAAMrB,kB,GA9CbuB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.615bf2eb.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Header = () => {\r\n    return (\r\n        <h1>Drum Machine</h1>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\n\r\nconst Main = (props) => {\r\n    const styles={height: 200}\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-6 row\" style={styles}>\r\n                    {props.keystrokes.map((val, index) => \r\n                    <button \r\n                    className=\"col-4 drum-pad\" \r\n                    id={props.sounds[index]} \r\n                    onClick={props.sound} \r\n                    key={val}\r\n                    >{val}\r\n                    <audio \r\n                    src={`./sounds/${props.sounds[index]}.wav`} \r\n                    className={props.sounds[index]} \r\n                    id={val}\r\n                    >\r\n                    </audio>\r\n                    </button>)}\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <h2>Now playing:</h2>\r\n                    <h3 id=\"display\">{props.name}</h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main","import React from 'react';\nimport './App.css';\nimport Header from \"./components/header\"\nimport Main from \"./components/main\"\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      sounds: [\n        \"bongo\",\n        \"dirtyhat\",\n        \"ghost\",\n        \"kick\",\n        \"pop\",\n        \"quartertone\",\n        \"snare\",\n        \"subbasesoft\",\n        \"wip\",\n      ],\n      keystrokes: [\n        \"Q\",\n        \"W\",\n        \"E\",\n        \"A\",\n        \"S\",\n        \"D\",\n        \"Z\",\n        \"X\",\n        \"C\",\n      ],\n      name: \"\"\n    }\n  }\n  handleClick = (event) => {\n    let newSound = new Audio(`./sounds/${event.target.id}.wav`)\n    console.log(newSound.src)\n    newSound.play()\n    this.setState({\n      name: event.target.id\n    })\n  }\n  \n  render() {\n    return (\n      <div className=\"App\" id=\"drum-machine\">\n        <Header />\n        <Main \n        sound={this.handleClick}\n        sounds={this.state.sounds}\n        name={this.state.name}\n        keystrokes={this.state.keystrokes}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n// User Story #1: I should be able to see an outer container with a corresponding id=\"drum-machine\" that contains all other elements.\n\n// User Story #2: Within #drum-machine I can see an element with a corresponding id=\"display\".\n\n// User Story #3: Within #drum-machine I can see 9 clickable drum pad elements, each with a class name of drum-pad, a unique id that describes the audio clip the drum pad will be set up to trigger, and an inner text that corresponds to one of the following keys on the keyboard: Q, W, E, A, S, D, Z, X, C. The drum pads MUST be in this order.\n\n// User Story #4: Within each .drum-pad, there should be an HTML5 audio element which has a src attribute pointing to an audio clip, a class name of clip, and an id corresponding to the inner text of its parent .drum-pad (e.g. id=\"Q\", id=\"W\", id=\"E\" etc.).\n\n// User Story #5: When I click on a .drum-pad element, the audio clip contained in its child audio element should be triggered.\n\n// User Story #6: When I press the trigger key associated with each .drum-pad, the audio clip contained in its child audio element should be triggered (e.g. pressing the Q key should trigger the drum pad which contains the string \"Q\", pressing the W key should trigger the drum pad which contains the string \"W\", etc.).\n\n// User Story #7: When a .drum-pad is triggered, a string describing the associated audio clip is displayed as the inner text of the #display element (each string must be unique).","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}